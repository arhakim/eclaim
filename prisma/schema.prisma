generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(cuid())
  email             String         @unique
  name              String
  avatar            String?
  role              String         @db.VarChar
  departmentId      String?
  managerId         String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  password          String
  approvals         Approval[]
  claims            ExpenseClaim[]
  sentNotifications Notification[] @relation("NotificationSender")
  notifications     Notification[]
  department        Department?    @relation(fields: [departmentId], references: [id])
  manager           User?          @relation("UserManager", fields: [managerId], references: [id])
  employees         User[]         @relation("UserManager")

  @@map("users")
}

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]

  @@map("departments")
}

model ExpenseClaim {
  id            String         @id @default(cuid())
  title         String
  description   String?
  totalAmount   Decimal        @db.Decimal(10, 2)
  currency      String         @default("USD")
  status        String         @db.VarChar
  expenseDate   DateTime
  submittedAt   DateTime?
  userId        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  approvals     Approval[]
  user          User           @relation(fields: [userId], references: [id])
  items         ExpenseItem[]
  notifications Notification[]
  receipts      Receipt[]

  @@map("expense_claims")
}

model ExpenseItem {
  id          String       @id @default(cuid())
  description String
  amount      Decimal      @db.Decimal(10, 2)
  category    String       @db.VarChar
  claimId     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  claim       ExpenseClaim @relation(fields: [claimId], references: [id], onDelete: Cascade)

  @@map("expense_items")
}

model Receipt {
  id        String       @id @default(cuid())
  filename  String
  fileUrl   String
  fileSize  Int
  mimeType  String
  claimId   String
  createdAt DateTime     @default(now())
  claim     ExpenseClaim @relation(fields: [claimId], references: [id], onDelete: Cascade)

  @@map("receipts")
}

model Approval {
  id         String       @id @default(cuid())
  status     String       @db.VarChar
  comments   String?
  claimId    String
  approverId String
  approvedAt DateTime?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  approver   User         @relation(fields: [approverId], references: [id])
  claim      ExpenseClaim @relation(fields: [claimId], references: [id], onDelete: Cascade)

  @@unique([claimId, approverId])
  @@map("approvals")
}

model Notification {
  id        String        @id @default(cuid())
  title     String
  message   String
  type      String        @db.VarChar
  isRead    Boolean       @default(false)
  userId    String
  claimId   String?
  senderId  String?
  data      Json?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  claim     ExpenseClaim? @relation(fields: [claimId], references: [id], onDelete: Cascade)
  sender    User?         @relation("NotificationSender", fields: [senderId], references: [id])
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum UserRole {
  EMPLOYEE
  MANAGER
  ADMIN
}

enum ExpenseClaimStatus {
  DRAFT
  SUBMITTED
  IN_REVIEW
  APPROVED
  REJECTED
  PAID
}

enum ExpenseCategory {
  TRAVEL
  MEALS
  ACCOMMODATION
  TRANSPORT
  OFFICE_SUPPLIES
  TRAINING
  MARKETING
  OTHER
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  CLAIM_APPROVED
  CLAIM_REJECTED
  CLAIM_SUBMITTED
}
