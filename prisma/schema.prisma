// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for employees and managers
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  avatar    String?
  role      UserRole @default(EMPLOYEE)

  // Department relationship
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])

  // Manager relationship (self-referencing)
  managerId String?
  manager   User?   @relation("UserManager", fields: [managerId], references: [id])
  employees User[]  @relation("UserManager")

  // Claims submitted by this user
  claims    ExpenseClaim[]

  // Approvals made by this user (as manager)
  approvals Approval[]

  // Notifications received by this user
  notifications Notification[]

  // Notifications sent by this user
  sentNotifications Notification[] @relation("NotificationSender")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// Department model
model Department {
  id          String @id @default(cuid())
  name        String @unique
  description String?

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("departments")
}

// Main expense claim model
model ExpenseClaim {
  id          String            @id @default(cuid())
  title       String
  description String?
  totalAmount Decimal           @db.Decimal(10, 2)
  currency    String            @default("USD")
  status      ExpenseClaimStatus @default(DRAFT)

  // Dates
  expenseDate DateTime
  submittedAt DateTime?

  // User relationship
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Items and receipts
  items    ExpenseItem[]
  receipts Receipt[]

  // Approval workflow
  approvals Approval[]

  // Notifications related to this claim
  notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("expense_claims")
}

// Individual expense items within a claim
model ExpenseItem {
  id          String  @id @default(cuid())
  description String
  amount      Decimal @db.Decimal(10, 2)
  category    ExpenseCategory

  // Claim relationship
  claimId String
  claim   ExpenseClaim @relation(fields: [claimId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("expense_items")
}

// Receipt attachments
model Receipt {
  id       String @id @default(cuid())
  filename String
  fileUrl  String
  fileSize Int
  mimeType String

  // Claim relationship
  claimId String
  claim   ExpenseClaim @relation(fields: [claimId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("receipts")
}

// Approval workflow tracking
model Approval {
  id       String         @id @default(cuid())
  status   ApprovalStatus @default(PENDING)
  comments String?

  // Relationships
  claimId String
  claim   ExpenseClaim @relation(fields: [claimId], references: [id], onDelete: Cascade)

  approverId String
  approver   User   @relation(fields: [approverId], references: [id])

  approvedAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([claimId, approverId])
  @@map("approvals")
}

// Notification model for in-app notifications
model Notification {
  id      String          @id @default(cuid())
  title   String
  message String
  type    NotificationType @default(INFO)
  isRead  Boolean         @default(false)

  // User relationship
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Optional claim relationship for claim-related notifications
  claimId String?
  claim   ExpenseClaim? @relation(fields: [claimId], references: [id], onDelete: Cascade)

  // Optional sender for notifications from other users
  senderId String?
  sender   User?   @relation("NotificationSender", fields: [senderId], references: [id])

  // Additional data (JSON field for flexible notification data)
  data Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

// Enums
enum UserRole {
  EMPLOYEE
  MANAGER
  ADMIN
}

enum ExpenseClaimStatus {
  DRAFT
  SUBMITTED
  IN_REVIEW
  APPROVED
  REJECTED
  PAID
}

enum ExpenseCategory {
  TRAVEL
  MEALS
  ACCOMMODATION
  TRANSPORT
  OFFICE_SUPPLIES
  TRAINING
  MARKETING
  OTHER
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  CLAIM_APPROVED
  CLAIM_REJECTED
  CLAIM_SUBMITTED
}
